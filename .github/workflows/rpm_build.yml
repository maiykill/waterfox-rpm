name: Build RPM on Waterfox Release Check

on:
  schedule:
    - cron: "*/10 * * * *" # Run every 10 minutes
  workflow_dispatch: # Manual trigger

permissions:
  contents: write # Needed for commit and release creation
  packages: write # Needed if managing packages (optional here)

jobs:
  build_and_release_rpm:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4.2.2

      - name: Get latest Waterfox version from GitHub API
        id: fetch_latest
        run: |
          latest_tag=$(curl -s -H "Accept: application/vnd.github+json" \
            https://api.github.com/repos/BrowserWorks/Waterfox/releases/latest | jq -r .tag_name)
          echo "Latest upstream Waterfox tag: $latest_tag"
          echo "LATEST_TAG=$latest_tag" >> $GITHUB_ENV
          echo "VERSION_NO_V=$latest_tag" >> $GITHUB_ENV

      - name: Check source archive on CDN
        id: check_cdn
        run: |
          url="https://cdn1.waterfox.net/waterfox/releases/${VERSION_NO_V}/Linux_x86_64/waterfox-${VERSION_NO_V}.tar.bz2"
          echo "Checking if source archive exists at $url"
          if curl --head --silent --fail "$url"; then
            echo "source_exists=true" >> $GITHUB_OUTPUT
          else
            echo "source_exists=false" >> $GITHUB_OUTPUT
          fi

      - name: Get current spec version
        id: get_spec_version
        run: |
          spec_version=$(grep -m1 '^Version:' waterfox/waterfox.spec | awk '{print $2}')
          echo "Current spec file version: $spec_version"
          echo "SPEC_VERSION=$spec_version" >> $GITHUB_ENV

      - name: Decide on update necessity
        id: check_update
        run: |
          if [[ "$VERSION_NO_V" == "$SPEC_VERSION" ]]; then
            echo "update_needed=false" >> $GITHUB_OUTPUT
          elif [[ "${{ steps.check_cdn.outputs.source_exists }}" == "true" ]]; then
            echo "update_needed=true" >> $GITHUB_OUTPUT
          else
            echo "update_needed=false" >> $GITHUB_OUTPUT
          fi

      - name: No update found message
        if: steps.check_update.outputs.update_needed == 'false'
        run: echo "No new Waterfox release version found; skipping build and release steps."

      - name: Update spec file version and changelog
        if: steps.check_update.outputs.update_needed == 'true'
        run: |
          sed -i "s/^Version:.*/Version: $VERSION_NO_V/" waterfox/waterfox.spec
          current_date=$(date '+%a %b %d %Y')
          sed -i "/^%changelog$/a * $current_date build-bot <actions-build-bot@github.com> - $VERSION_NO_V-1\\n- Updated to Waterfox $VERSION_NO_V" waterfox/waterfox.spec

      - name: Commit and push updated files (sync version)
        if: steps.check_update.outputs.update_needed == 'true'
        run: |
          git config user.name "build-bot"
          git config user.email "actions-build-bot@github.com"
          git add waterfox/waterfox.spec
          if git diff --cached --quiet; then
            echo "No changes to commit"
          else
            git commit -m "sync: waterfox.spec to ${{ env.VERSION_NO_V }}"
            git fetch origin ${{ github.ref_name }}
            git rebase origin/${{ github.ref_name }}
            git push origin ${{ github.ref_name }}
          fi

      - name: Install rpm and build-essential
        if: steps.check_update.outputs.update_needed == 'true'
        run: |
          sudo apt-get update
          sudo apt-get install -y rpm build-essential

      - name: Download Waterfox source archive to rpmbuild SOURCES
        if: steps.check_update.outputs.update_needed == 'true'
        run: |
          mkdir -p ~/rpmbuild/SOURCES
          curl -fSL -o ~/rpmbuild/SOURCES/waterfox-${VERSION_NO_V}.tar.bz2 \
            https://cdn1.waterfox.net/waterfox/releases/${VERSION_NO_V}/Linux_x86_64/waterfox-${VERSION_NO_V}.tar.bz2

      - name: Copy additional source files to rpmbuild SOURCES
        if: steps.check_update.outputs.update_needed == 'true'
        run: |
          cp waterfox/waterfox.desktop ~/rpmbuild/SOURCES/
          cp waterfox/policies.json ~/rpmbuild/SOURCES/
          cp LICENSE ~/rpmbuild/SOURCES/
          cp README.md ~/rpmbuild/SOURCES/

      - name: Prepare RPM build tree manually
        if: steps.check_update.outputs.update_needed == 'true'
        run: |
          mkdir -p ~/rpmbuild/{BUILD,RPMS,SOURCES,SPECS,SRPMS}
          cp waterfox/waterfox.spec ~/rpmbuild/SPECS/

      - name: Build RPM package
        if: steps.check_update.outputs.update_needed == 'true'
        run: |
          rpmbuild -ba ~/rpmbuild/SPECS/waterfox.spec

      - name: List built RPM packages
        if: steps.check_update.outputs.update_needed == 'true'
        run: ls -lh ~/rpmbuild/RPMS/x86_64/

      - name: Create GitHub Release and Upload RPM
        if: steps.check_update.outputs.update_needed == 'true'
        uses: ncipollo/release-action@v1
        with:
          tag: ${{ env.LATEST_TAG }}
          name: "Waterfox ${{ env.LATEST_TAG }} RPM Release"
          artifacts: "/home/runner/rpmbuild/RPMS/x86_64/waterfox-${{ env.VERSION_NO_V }}-1.x86_64.rpm"
          body: "Automated RPM package for Waterfox ${{ env.LATEST_TAG }}"
          draft: false
          prerelease: false
          token: ${{ secrets.GITHUB_TOKEN }}
